// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Stores.Persistence;

#nullable disable

namespace Stores.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231105132917_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Stores.Domain.Entity.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AddressId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AddressId");

                    b.HasIndex("StoreId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Stores.Domain.Entity.Administrator", b =>
                {
                    b.Property<int>("AdministratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AdministratorId"));

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AdministratorId");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("Stores.Domain.Entity.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StoreId"));

                    b.Property<int>("AdministratorId")
                        .HasColumnType("integer");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StoreTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkingHoursId")
                        .HasColumnType("integer");

                    b.HasKey("StoreId");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("StoreTypeId");

                    b.HasIndex("WorkingHoursId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Stores.Domain.Entity.StoreType", b =>
                {
                    b.Property<int>("StoreTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StoreTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StoreTypeId");

                    b.ToTable("StoreTypes");
                });

            modelBuilder.Entity("Stores.Domain.Entity.WorkingHours", b =>
                {
                    b.Property<int>("WorkingHoursId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkingHoursId"));

                    b.Property<DateTime>("ClosingTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OpeningTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("WorkingHoursId");

                    b.ToTable("WorkingHours");
                });

            modelBuilder.Entity("Stores.Domain.Entity.Address", b =>
                {
                    b.HasOne("Stores.Domain.Entity.Store", "Store")
                        .WithMany("Addresses")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Stores.Domain.Entity.Store", b =>
                {
                    b.HasOne("Stores.Domain.Entity.Administrator", "Administrator")
                        .WithMany("Stores")
                        .HasForeignKey("AdministratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stores.Domain.Entity.StoreType", "StoreType")
                        .WithMany("Stores")
                        .HasForeignKey("StoreTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stores.Domain.Entity.WorkingHours", "WorkingHours")
                        .WithMany("Stores")
                        .HasForeignKey("WorkingHoursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Administrator");

                    b.Navigation("StoreType");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("Stores.Domain.Entity.Administrator", b =>
                {
                    b.Navigation("Stores");
                });

            modelBuilder.Entity("Stores.Domain.Entity.Store", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Stores.Domain.Entity.StoreType", b =>
                {
                    b.Navigation("Stores");
                });

            modelBuilder.Entity("Stores.Domain.Entity.WorkingHours", b =>
                {
                    b.Navigation("Stores");
                });
#pragma warning restore 612, 618
        }
    }
}
